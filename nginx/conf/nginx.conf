#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    #include       mime.types;
    default_type  application/octet-stream;

	#log_format postdata escape=none '[$time_local] $request ($status)'
    #                                '[TYPE]: $type'
	#								'[LOC]: $location'
	#								'[BODY]: $request_body';

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8080;
        server_name  localhost;

		rewrite_log on;

		index index.html;
        root /var/www;

		#charset koi8-r;

        #access_log  logs/host.access.log  main;

        include /usr/local/openresty/nginx/conf/proxy_pass_conf.locations;

		location = /data-receiving.1cws {
			client_body_buffer_size 64k;
			set $type 'typeElectronicRecord';

			set $type '';

			content_by_lua '
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                local match = ngx.re.match(data, "typeName>(?<t>.*)<")
                if match then
                    ngx.var.type = match["t"]
					ngx.redirect("http://M1-CTX-4009:8080/" .. match["t"], 307)
					--if match["t"] == "typeCargoIssue" then
					--	ngx.redirect("http://M1-CTX-4009/gp_dev_hran/ws/data-receiving.1cws", 307)
					--end
					--if match["t"] == "typeElectronicRecord" then
					--	ngx.redirect("http://M1-CTX-4009/dlt_dev/ws/data-receiving.1cws", 307)
					--end
                else
                    ngx.var.type = "sss"
                end

				ngx.say("LOC: ", ngx.var.location)
                ngx.say("BODY: ", data)
                ngx.say("TYPE: ", ngx.var.type)
				ngx.say("URI: ", ngx.var.uri)
                ngx.say("UPSTREAM: ", ngx.var.upstream)
            ';

			#access_log logs/access.log postdata;

			rewrite ^.+$ /$type break;

		}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }

}