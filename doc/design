Команды API:
- (read) прочитать настройку - возврат Настройка (Option)
- (readAll) прочитать настройки - возврат массив Настроек
- (save) записать настройку (если она существует, то обновить) - возврат добавленная Настройка
- (saveAll) записать настройки (при этом все имеющиеся удаляются) - возврат bool - не будет выполнен из UI, только отдельным запросом
- (remove) удалить настройку - возврат bool
- (removeAll) удалить все настройки - возврат bool - не будет выполнен из UI, только отдельным запросом

Параметры настроек:
- (id) идентификатор
измерения:
- (resource) тип настройки (pb, sv, ws, hs)
- (name) имя типа или имя сервиса
- (methodName) метод сервиса
- (destination) получатель
свойства:
- (baseURL) идентификатор базы
- (author) автор

Комбинации настроек:
pb:
- получатель
- имя типа
- идентификатор базы
- автор
sv:
- получатель
- имя сервиса
- метод сервиса
- идентификатор базы
- автор
ws:
- получатель
- имя сервиса
- метод сервиса
- идентификатор базы
- автор
hs:
- получатель
- имя сервиса
- идентификатор базы
- автор

Варианты и ограничения:
- Настройки по управляемым сервисам могут быть как с пустым methodName, так и с заполненным. Сервер будет проксировать сначала с заполненными значенями, затем с пустыми, поэтому нужно это учитывать и проверять наличие Настроек с заполненным methodName
- файл src/out/proxy_pass_conf.locations должен существовать (хоть пустой, но должен)пше

todo:
- пагинация
- получение данных для UI:
    - имена баз dtl, gp, dlc, ...
    - URLы опубликованных баз разработчиков
    - имена web- и http-сервисов непосредственно из баз
- получение имени пользователя из авторизованного пользователя
- git commit после каждого изменения файла